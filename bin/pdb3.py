"""Module pdb.py- parses coordinate data in pdbfile
	----------------------------------------
	30-12-2012
	Alternate locations are kept as they are in the original pdb file. No renaming is done.
	When alternate location is not given, then it is assumed to be ' '.

	29-11-2012
	This version contains a modification for accepting pdb files generated by program 'reduce'. (Ref.: http://kinemage.biochem.duke.edu/software/reduce.php)
	The output is pdf file with hydrogens added to all atoms except the oxygens of water molecules.
	Problem here is that the atom numbers to newly added hydrogens are set to '0'.
	For some programs unique atom numbers are necessary. Hence the atom numbers '0' are renumbered here.
	New atoms are given numbers starting from the maximum atom number in the existing file.
	Note: Ohter atom numbers will remain as they are in the original pdb file.

	Suggestion: Avoid using pymol to add missing hydroges. Pymol renumbers the whole pdb file and the original atom numbers are lost.
	----------------------------------------

	Warnings:
	When adding hydrogens to atoms with alternate locations,
	pymol does not give same atom names to hydrogens added to same atom with alternate locations.
	So H11A might have alternate location named as H12B.

	Sometimes it might happen that some atom X is closer to hydrogen of its alternate location.
	This will give rise to wrong number of connectivities to atoms.

"""
import re

from collections import defaultdict

def infinite_defaultdict():
	return defaultdict(infinite_defaultdict)
###END infinite_deraultdict()###

def sorted_nicely(l): 
	""" Sort the given iterable in the way that humans expect."""
	"""Taken from: http://stackoverflow.com/questions/2669059/how-to-sort-alpha-numeric-set-in-python"""
	convert = lambda text: int(text) if text.isdigit() else text 
	alphanum_key = lambda key: [ convert(c) for c in re.split('([0-9]+)', key) ] 
	return sorted(l, key = alphanum_key)
###END FUNCTION sorted_nicely(l)


class Pdb3 :

	def __init__(self,filename):
		self.filename = filename

###DEFINE GLOBAL VARIABLES FOR CLASS Pdb
		self.pdbCoordData = infinite_defaultdict()
		self.atomCoordData = infinite_defaultdict()
		self.maxAtomNumLimit = 0
		self.maxAtomNum = 0
		self.missingResFlag = 0
		self.missingAtomFlag = 0
		self.missingResData = infinite_defaultdict()
		self.missingAtomData = infinite_defaultdict()
		self.modresData = infinite_defaultdict()
		self.hetData = infinite_defaultdict()
		self.hetnamData = infinite_defaultdict()
		self.resList = infinite_defaultdict()
		self.seq = infinite_defaultdict()

###END __init__()###

	def setCoordData(self):

		selectedAtomCoordData = infinite_defaultdict()

		self.setMaxAtomNum()
		print "Maximum atom number before renumbering atoms with atom number '0': "+str(self.maxAtomNum)

		print "Class Pdb :: setCoordData() :: Opening file",self.filename
		pdbfile = open(self.filename,'r')
		lines =  pdbfile.readlines()
		
		for line in lines:
			#print line
#			matchObj = re.match(r'.*/(.+)\.pdb',i,re.S)

###SET MISSING RESIDUES
			if not line.startswith("REMARK 465"):
				self.missingResFlag = 0

			if self.missingResFlag == 1:
#REMARK 465   M RES C SSSEQI                                                     
#REMARK 465     MSE A    -1                                                      
#REMARK 465     MET A   101
#=============================REMARK 465   = = =GLU= =A=  = 200 ==                                                     
				matchObj = re.match(r'REMARK 465...(.).(...).(.)..(.....?).*\n?',line,re.S)
				#print "*" + line
				MODEL = matchObj.group(1).strip()
				RES_NAME = matchObj.group(2).strip()
				CHAIN = matchObj.group(3).strip()
				RES_NUM = matchObj.group(4).strip()
				self.missingResData[CHAIN][RES_NUM] = {'RES_NAME':RES_NAME}

			if line.startswith("REMARK 465   M RES C SSSEQI"):
				self.missingResFlag = 1


###SET MISSING ATOMS
			if not line.startswith("REMARK 470"):
				self.missingAtomFlag = 0

			if self.missingAtomFlag == 1:
#REMARK 470   M RES CSSEQI  ATOMS                                                
#REMARK 470     LYS A 186    CG   CD   CE   NZ     
#=============================REMARK 470   =M= =RES= =C==SSEQI==  =ATOMS                                                
#=============================REMARK 470   = = =LYS= =A== 186 ==  = CG   CD   CE   NZ     
				matchObj = re.match(r'REMARK 470...(.).(...).(.)(.....?).?.?(.+)\n?',line,re.S)
				MODEL = matchObj.group(1).strip()
				RES_NAME = matchObj.group(2).strip()
				CHAIN = matchObj.group(3).strip()
				RES_NUM = matchObj.group(4).strip()
				ATOM_LIST = re.split(' +',matchObj.group(5).strip())
				for atomName in ATOM_LIST:
					self.missingAtomData[CHAIN][RES_NUM][atomName] = {'RES_NAME':RES_NAME}

			if line.startswith("REMARK 470   M RES CSSEQI  ATOMS"):
				self.missingAtomFlag = 1

###SET MODRES, HET AND HETNAM DATA
#MODRES 1VHU MSE A    8  MET  SELENOMETHIONINE                                   
			if line.startswith("MODRES"):
#=============================MODRES =1CL1= =LLP= =A= = 210 = =LYS=
#=============================MODRES =1VHU= =MSE= =A= =   8 = =MET=  =SELENOMETHIONINE
				#print line
				matchObj = re.match(r'MODRES.(....).(...).(.).(.....).(...).?.?(.*)\n?',line,re.S)

				ID_CODE = matchObj.group(1).strip()
				RES_NAME = matchObj.group(2).strip()
				CHAIN = matchObj.group(3).strip()
				RES_NUM = matchObj.group(4).strip()
				STD_RES_NAME = matchObj.group(5).strip()
				COMMENT = matchObj.group(6).strip()
				self.modresData[CHAIN][RES_NUM] = {'RES_NAME':RES_NAME, 'STD_RES_NAME':STD_RES_NAME, 'COMMENT':COMMENT}

			if line.startswith("HET   "):
				#print self.filename+">"+line+"*"
#=============================HET    = ZN=  =A== 201 =  =    1=
#=============================HET    =MSE=  =A== 114 =  =   12==     ===                                                  
				matchObj = re.match(r'HET   .(...)..(.)(.....)..(.....)(.....)?(.*)\n?',line,re.S)
				RES_NAME = matchObj.group(1).strip()
				CHAIN = matchObj.group(2).strip()
				RES_NUM = matchObj.group(3).strip()
				NUM_HETATM = int(matchObj.group(4).strip())
				DESC = matchObj.group(6).strip()
				self.hetData[CHAIN][RES_NUM] = {'RES_NAME':RES_NAME, 'NUM_HETATM':NUM_HETATM, 'DESC':DESC}


###AFTER SETTING HETNAM DATA, THERE IS POSSIBILITY THAT THE ADDITIONAL RESIDUE NAMES ARE PRESENT ONLY IN 'FORMUL' RECORD.
###THIS CAUSES NULL OBJECTS ASSIGNED TO ANY OTHER KEYS IN THE DATA STRUCTURE hetnamData.
###THIS HAS BEEN CORRECTED AT THE END OF THIS SUBROUTINE BY ASSINGNING "" STRINGS WHEREVER KEYS ARE ABSENT.
			if line.startswith("HETNAM"):
#=============================HETNAM  =  = =NAG= =N-ACETYL-D-GLUCOSAMINE
#=============================HETNAM  =  = =SAD= =BETA-METHYLENE SELENAZOLE-4-CARBOXAMIDE ADENINE
#=============================HETNAM  =2 = =SAD= =DINUCLEOTIDE
#=============================HETNAM  =  = =MSE= =SELENOMETHIONINE
				matchObj = re.match(r'HETNAM..(..).(...).(.*)\n?',line,re.S)
				CONTD = matchObj.group(1).strip()
				RES_NAME = matchObj.group(2).strip()
				CHEM_NAME = matchObj.group(3).strip()
				if CONTD == "":
					self.hetnamData[RES_NAME] = {'CHEM_NAME':CHEM_NAME}
				else:
					self.hetnamData[RES_NAME]['CHEM_NAME'] += " " + CHEM_NAME

			if line.startswith("HETSYN"):
#=============================HETSYN  =  = =HV5= =3-METHYL-L-VALINE
#=============================HETSYN  =  = =AB1= =ABT-378; LOPINAVIR
				matchObj = re.match(r'HETSYN..(..).(...).?(.*)\n?',line,re.S)
				CONTD = matchObj.group(1).strip()
				RES_NAME = matchObj.group(2).strip()
				CHEM_NAME_SYN = matchObj.group(3).strip()
				if CONTD == "":
					self.hetnamData[RES_NAME]['CHEM_NAME_SYN'] = CHEM_NAME_SYN
				else:
					self.hetnamData[RES_NAME]['CHEM_NAME_SYN'] += " " + CHEM_NAME_SYN

			if line.startswith("FORMUL"):
#=============================FORMUL  = 3=  =HOH= =  ==*==278(H2 O)                                                    
#=============================FORMUL  = 1=  =MSE= =  == ==5(C5 H11 N O2 SE)                                            
				matchObj = re.match(r'FORMUL..(..)..(...).(..)(.)(.*)\n?',line,re.S)
				COMP_NUM = matchObj.group(1).strip()
				RES_NAME = matchObj.group(2).strip()
				CONTD = matchObj.group(3).strip()
				ASTERISK = matchObj.group(4).strip()
				FORMULA = matchObj.group(5).strip()
				if CONTD == "":
					self.hetnamData[RES_NAME]['COMP_NUM'] = COMP_NUM
					self.hetnamData[RES_NAME]['ASTERISK'] = ASTERISK
					self.hetnamData[RES_NAME]['FORMULA'] = FORMULA
				else:
					self.hetnamData[RES_NAME]['COMP_NUM'] += " " + COMP_NUM
					self.hetnamData[RES_NAME]['ASTERISK'] += " " + ASTERISK
					self.hetnamData[RES_NAME]['FORMULA'] += " " + FORMULA



			if line.startswith("ATOM") | line.startswith("HETATM"):
#	      if(line=~m/(......)(.....)(.)(....)(.)(...)(.)(.)(.....)(...)(........)(........)(........)(.*)\n/)

				matchObj = re.match(r'(......)(.....)(.)(....)(.)(...)(.)(.)(.....)(...)(........)(........)(........)(.*)\n',line,re.S)

#				if matchObj.group(5).strip() == altLoc or matchObj.group(5).strip() == '':

				TAG = matchObj.group(1).strip()
				ATOM_NUM = int(matchObj.group(2).strip())
				if ATOM_NUM == 0:
					ATOM_NUM = self.maxAtomNum + 1
					self.maxAtomNum += 1
				BLANK1 = matchObj.group(3).strip()
				ATOM_NAME = matchObj.group(4).strip()
				ALT_LOC = matchObj.group(5).strip()
				RES_NAME = matchObj.group(6).strip()
				BLANK2 = matchObj.group(7).strip()
				CHAIN = matchObj.group(8).strip()
				RES_NUM = matchObj.group(9).strip()
				BLANK3 = matchObj.group(10).strip()
				X = float(matchObj.group(11).strip())
				Y = float(matchObj.group(12).strip())
				Z = float(matchObj.group(13).strip())

				remainingLine = matchObj.group(14)

###SOME PDB FILES MAY HAVE ATOMS MORE THAN 99999.THIS NUMBER IS THE MAXIMUM THAT CAN BE WRITTEN IN ATOM NUMBER COLUMN.
###IF THIS HAPPENS PRINT WARNING MESSAGE THAT 'self.atomCoordData[ATOM_NUM]' WILL BE ERRONEOUS.

				if ATOM_NUM == 99999:
					self.maxAtomNumLimit = 1

				if len(remainingLine) == 30:
					matchObRemainingLine = re.match(r'(......)(......)(..........)(..)(..)(....)',remainingLine,re.S)
					OCP = float(matchObRemainingLine.group(1).strip())
					B_FACT = float(matchObRemainingLine.group(2).strip())
					BLANK4 = matchObRemainingLine.group(3).strip()
					ELEMENT = matchObRemainingLine.group(4).strip()
					CHARGE = matchObRemainingLine.group(5).strip()

				elif len(remainingLine) == 26:
					matchObRemainingLine = re.match(r'(......)(......)(..........)(..)(..)',remainingLine,re.S)
					OCP = float(matchObRemainingLine.group(1).strip())
					B_FACT = float(matchObRemainingLine.group(2).strip())
					BLANK4 = matchObRemainingLine.group(3).strip()
					ELEMENT = matchObRemainingLine.group(4).strip()
					CHARGE = matchObRemainingLine.group(5).strip()
			
				elif len(remainingLine) == 24:
					matchObRemainingLine = re.match(r'(......)(......)(..........)(..)',remainingLine,re.S)
					OCP = float(matchObRemainingLine.group(1).strip())
					B_FACT = float(matchObRemainingLine.group(2).strip())
					BLANK4 = matchObRemainingLine.group(3).strip()
					ELEMENT = matchObRemainingLine.group(4).strip()
					CHARGE = 'NA'
			
				elif len(remainingLine) == 22:
					matchObRemainingLine = re.match(r'(......)(......)(..........)',remainingLine,re.S)
					OCP = float(matchObRemainingLine.group(1).strip())
					B_FACT = float(matchObRemainingLine.group(2).strip())
					BLANK4 = matchObRemainingLine.group(3).strip()
					ELEMENT = ''
					CHARGE = 'NA'
			
				elif len(remainingLine) == 12:
					matchObRemainingLine = re.match(r'(......)(......)',remainingLine,re.S)
					OCP = float(matchObRemainingLine.group(1).strip())
					B_FACT = float(matchObRemainingLine.group(2).strip())
					BLANK4 = ''
					ELEMENT = ''
					CHARGE = 'NA'

				elif len(remainingLine) == 6:
					OCP = float(emainingLine.strip())
					B_FACT = ''
					BLANK4 = ''
					ELEMENT = ''
					CHARGE = 'NA'
		
###ALT_LOC IS KEPT AS ' ' WHEN NOT SPECIFIED.
				if ALT_LOC == '' or ALT_LOC == 'A':
					ALT_LOC = ' '

				if CHARGE == '':
					CHARGE = 'NA'

				if ELEMENT == '':
					match = re.match(r'.(.)..',matchObj.group(4),re.S)
					ELEMENT = match.group(1)


###FILL pdbCoordData ONLY FOR ALT_LOC = 'A' OR ' '
				if ALT_LOC ==  ' ':
					self.pdbCoordData[CHAIN][RES_NUM]['RES_NAME'] = RES_NAME
					self.pdbCoordData[CHAIN][RES_NUM][ATOM_NAME][ALT_LOC] = {'TAG':TAG,'ATOM_NUM':ATOM_NUM,'X':X,'Y':Y,'Z':Z,'OCP':OCP,'B_FACT':B_FACT,'BLANK4':BLANK4,'ELEMENT':ELEMENT,'CHARGE':CHARGE}

###FILL atomCoordData FOR EASY ACCESS OF EACH ATOM BY ATOM NUMBER
					self.atomCoordData[ATOM_NUM] = {'TAG':TAG,'X':X,'Y':Y,'Z':Z,'CHAIN':CHAIN,'RES_NUM':RES_NUM,'RES_NAME':RES_NAME,'ATOM_NAME':ATOM_NAME,'ALT_LOC':ALT_LOC,'OCP':OCP,'B_FACT':B_FACT,'ELEMENT':ELEMENT,'CHARGE':CHARGE}

###END FOR LOOP###


###RECTIFY hetnamData BY ADDING "" VALUES TO MISSING KEYS.
		for resName in self.hetnamData.keys():
			if 'CHEM_NAME' not in self.hetnamData[resName]:
				self.hetnamData[resName]['CHEM_NAME'] = ""
			if 'CHEM_NAME_SYN' not in self.hetnamData[resName]:
				self.hetnamData[resName]['CHEM_NAME_SYN'] = ""
			if 'COMP_NUM' not in self.hetnamData[resName]:
				self.hetnamData[resName]['COMP_NUM'] = ""
			if 'ASTERISK' not in self.hetnamData[resName]:
				self.hetnamData[resName]['ASTERISK'] = ""
			if 'FORMULA' not in self.hetnamData[resName]:
				self.hetnamData[resName]['FORMULA'] = ""


###ADD MISSING CHAINS TO pdbCoordData using missingResData and hetData.
			for chain in self.missingResData.keys():
				for resNum in self.missingResData[chain].keys():
					self.pdbCoordData[chain][resNum]['RES_NAME'] = self.missingResData[chain][resNum]['RES_NAME']
			for chain in self.hetData.keys():
				for resNum in self.hetData[chain].keys():
					self.pdbCoordData[chain][resNum]['RES_NAME'] = self.hetData[chain][resNum]['RES_NAME']

###SET AMINO ACID SEQUENCE FOR EACH CHAIN
		self.setSeq()


		print "Maximum atom number after renumbering atoms with atom number '0': "+str(self.maxAtomNum)
		if self.maxAtomNumLimit == 1:
			print "#WARNING: pdb.py :: Maximum atom number limit reached. 'self.atomCoordData[ATOM_NUM]' might be erroneous.\n"


###TEST PRINT MISSING RESIDUES AND ATOMS
		"""
		for chain in self.missingResData.keys():
			for resNum in self.missingResData[chain].keys():
				print chain + " " + resNum + " " + self.missingResData[chain][resNum]['RES_NAME']
		for chain in self.missingAtomData.keys():
			for resNum in self.missingAtomData[chain].keys():
				for atomName in self.missingAtomData[chain][resNum].keys():
					print chain + " " + resNum + " " + self.missingAtomData[chain][resNum][atomName]['RES_NAME'] + " " + atomName
		"""

		pdbfile.close()

###END setCoordData()###


	def setSeq(self):
		for chain in self.pdbCoordData.keys():
			for resnum in self.pdbCoordData[chain].keys():
				#print resnum + " => " + self.pdbCoordData[chain][resnum]['RES_NAME']
				self.resList[chain][resnum] = self.pdbCoordData[chain][resnum]['RES_NAME']
		for chain in self.missingResData.keys():
			for resnum in self.missingResData[chain].keys():
				#print resnum + " => " + self.missingResData[chain][resnum]['RES_NAME']
				self.resList[chain][resnum] = self.missingResData[chain][resnum]['RES_NAME']


		for chain in self.resList.keys():
			#print "CHIAN: " + chain
			seqArr = []
			for resnum in sorted_nicely(self.resList[chain].keys()):
				#print resnum + " => " + self.seq[chain][resnum]
				seqArr.append(resnum)


			tempArr = []
			tempIndex = []
			for i in range(0,len(seqArr)):
				#print "*" + str(i) + "=>" + seqArr[i]
				if seqArr[i].startswith("-"):
					#print "***" + str(i)
					tempArr.append(seqArr[i])
					tempIndex.append(i)


			tempIndex.reverse()
			for i in tempIndex:
				seqArr.pop(i)

			tempHash = dict()
			for x in tempArr:
				matchObj = re.match('(-\d+)(.*)',x,re.S)
				num = int(matchObj.group(1))
				alpha = matchObj.group(2)
				if num not in tempHash.keys():
					tempHash[num] = [alpha]
				else:
					tempHash[num].append(alpha)

			for i in tempHash.keys():
				tempHash[i].sort()

			newArr = []
			for i in sorted(tempHash.keys()):
				for a in sorted(tempHash[i]):
					#print "=" + str(i) + a
					newArr.append(str(i)+a)


			#print tempArr
			#print seqArr
			#print tempIndex
			#print newArr


			seqArr = newArr + seqArr
			#print seqArr


			for i in seqArr:
				#print i + " " + self.resList[chain][i]
				if self.resList[chain][i] != "HOH":
					if chain not in self.seq:
						self.seq[chain] = [self.resList[chain][i]]
					else:
						self.seq[chain].append(self.resList[chain][i])


					
	def setMaxAtomNum(self):

		print "Class Pdb :: setMaxAtomNum() :: Setting maximum atom number in ",self.filename
		pdbfile = open(self.filename,'r')
		lines =  pdbfile.readlines()
		
		for line in lines:
			#print line
#			matchObj = re.match(r'.*/(.+)\.pdb',i,re.S)
			
			if line.startswith("ATOM") | line.startswith("HETATM"):
#	      if(line=~m/(......)(.....)(.)(....)(.)(...)(.)(.)(.....)(...)(........)(........)(........)(.*)\n/)

				matchObj = re.match(r'(......)(.....).*\n',line,re.S)

#				if matchObj.group(5).strip() == altLoc or matchObj.group(5).strip() == '':

				ATOM_NUM = int(matchObj.group(2).strip())
				if ATOM_NUM > self.maxAtomNum:
					self.maxAtomNum = ATOM_NUM

		pdbfile.close()

###END setMaxAtomNumber()###

	def sort(self,arr,order):

		i = 0
		while i<len(arr):
			j = i+1
			while j<len(arr):

				if order == 'ASC':
					if arr[i] > arr[j]:
						#print i,j,arr[i],arr[j],
						temp = arr[i]
						arr[i] = arr[j]
						arr[j] = temp
						#print arr[i],arr[j],arr
				elif order == 'DESC':
					if arr[i] < arr[j]:
						#print i,j,arr[i],arr[j],
						temp = arr[i]
						arr[i] = arr[j]
						arr[j] = temp
						#print arr[i],arr[j],arr
				else:
					return(arr)
				j += 1

			i += 1
		return(arr)
###END FUNCTION sort(arr,reverse,mode)###



###TEST PRINTING pdbCoordData
#
#		print self.pdbCoordData
#		for k in self.pdbCoordData.keys():
#			for l in self.pdbCoordData[k].keys():
#				print k," ",l
#
#		print self.pdbCoordData['A'][1]['RES_NAME']
#		print self.pdbCoordData['A'][1]['O']['A']['Y']
#		print self.pdbCoordData['A'][1]['O']['A']['Z']


